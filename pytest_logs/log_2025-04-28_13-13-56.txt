============================= test session starts =============================
platform win32 -- Python 3.12.6, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\Redmi\Desktop\НИР\Мутации\str_WT
collected 170 items

test_json_mt_wt.py FFsssEEEEEEEEEEFFsssEEEEEEEEEEFFsssEEEEEEEEEEFFsssEEE [ 31%]
EEEEEEEssssssEEEEEEEEEEF.FsssEEEEEEEEEEF.FsssEEEEEEEEEEF.FsssEEEEEEEEEE. [ 73%]
sssEEEEEEEEEEFFsssEEEEEEEEEEFFFFsssEEEEEEEEEE                            [100%]

=================================== ERRORS ====================================
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...32\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...32\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...32\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...32\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...32\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...44b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...5\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
================================== FAILURES ===================================
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.json] _

pair = ('1BJ1_HL_VW_NH31H_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1BJ1_HL_VW_WT', 'sequences': [{'pro...IKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1BJ1_HL_VW_NH31H_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTHYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1BJ1_HL_VW_NH31H_MT.json] _

pair = ('1BJ1_HL_VW_NH31H_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1BJ1_HL_VW_WT', 'sequences': [{'pro...IKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1BJ1_HL_VW_NH31H_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTHYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.json] _

pair = ('1MHP_HL_A_HL30K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_HL30K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNKMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1MHP_HL_A_HL30K_MT.json] _

pair = ('1MHP_HL_A_HL30K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_HL30K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNKMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.json] _

pair = ('1MHP_HL_A_HL30R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_HL30R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNRMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1MHP_HL_A_HL30R_MT.json] _

pair = ('1MHP_HL_A_HL30R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_HL30R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNRMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.json] _

pair = ('1MHP_HL_A_LL48K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_LL48K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYKTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1MHP_HL_A_LL48K_MT.json] _

pair = ('1MHP_HL_A_LL48K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_LL48K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYKTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT.json] _

pair = ('1VFB_AB_C_TA53R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTRTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_TA53R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTRTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1VFB_AB_C_TA53R_MT.json] _

pair = ('1VFB_AB_C_TA53R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTRTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_TA53R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTRTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT.json] _

pair = ('1VFB_AB_C_YA50K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYKTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_YA50K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYKTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1VFB_AB_C_YA50K_MT.json] _

pair = ('1VFB_AB_C_YA50K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYKTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_YA50K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYKTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT.json] _

pair = ('2BDN_HL_A_NL31K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '2BDN_HL_A_NL31K_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 2BDN_HL_A_NL31K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYNRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYKRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2BDN_HL_A_NL31K_MT.json] _

pair = ('2BDN_HL_A_NL31K_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '2BDN_HL_A_NL31K_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 2BDN_HL_A_NL31K_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYNRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYKRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.json] _

pair = ('2BDN_HL_A_NL31R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '2BDN_HL_A_NL31K_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 2BDN_HL_A_NL31R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYNRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYRRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2BDN_HL_A_NL31R_MT.json] _

pair = ('2BDN_HL_A_NL31R_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '2BDN_HL_A_NL31K_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 2BDN_HL_A_NL31R_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYNRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQQSGAELVKAGASVKLSCPASGLNIKDTYMHWVKQRPEQGLEWIGRIDPANGNTKFDPKFQGKATITADTSSNTAYLQLSSLTSEDTAVYYCARGVFGFFDYWGQGTTLTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKIVPR"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSSSSFSVSLGDRVTITCKATEDIYRRLAWYQQKPGSAPRLLISGATSLETGVPSRFSGSGSGKDYTLSITSLQTEDVATYYCQQFWSAPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.json] _

pair = ('3BN9_B_CD_PD104H_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3BN9_B_CD_WT', 'sequences': [{'prot...KVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3BN9_B_CD_PD104H_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYPQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYHQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD100H\\3BN9_B_CD_PD100H_MT.json] _

pair = ('3BN9_B_CD_PD100H_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3BN9_B_CD_WT', 'sequences': [{'prot...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3BN9_B_CD_PD100H_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYPQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDYWSWIRKFPGNKLEYMGYISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD100H\\3BN9_B_CD_PD100H_WT.json] _

pair = ('3BN9_B_CD_PD100H_WT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3BN9_B_CD_WT', 'sequences': [{'prot...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3BN9_B_CD_PD100H_WT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYPQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDYWSWIRKFPGNKLEYMGAISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3BN9_B_CD_PD104H_MT.json] _

pair = ('3BN9_B_CD_PD104H_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3BN9_B_CD_WT', 'sequences': [{'prot...KVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3BN9_B_CD_PD104H_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYPQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLVQSGGGLVKPGGSLRLSCAASGFTFSSYAMSWVRQAPGKGLEWVSAISGSGGSTYYADSVKGRFTISRDNSKNTLYLQMSSLRAEDTAVYYCARPYLTYHQRRGPQNVSPFDNWGQGTMVTVSSASTKGPSVFPLAPLGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCRASQGISSYLAWYQQKPGKAPKLLIYAASSLQSGVPSRFSGSGSGTDFTLTISSLQPEDFAVYYCQQHGNLPYTFGDGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFN"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
=========================== short test summary info ===========================
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1BJ1_HL_VW_NH31H_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1MHP_HL_A_HL30K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1MHP_HL_A_HL30R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1MHP_HL_A_LL48K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1VFB_AB_C_TA53R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1VFB_AB_C_YA50K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2BDN_HL_A_NL31K_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2BDN_HL_A_NL31R_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD100H\\3BN9_B_CD_PD100H_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD100H\\3BN9_B_CD_PD100H_WT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3BN9_B_CD_PD104H_MT.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_NH31H\\1BJ1_HL_VW_NH31H_MT.tar\\s3data\\1bj1_hl_vw_nh31h_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30K\\1MHP_HL_A_HL30K_MT.tar\\s3data\\1mhp_hl_a_hl30k_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_HL30R\\1MHP_HL_A_HL30R_MT.tar\\s3data\\1mhp_hl_a_hl30r_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48K\\1MHP_HL_A_LL48K_MT.tar\\s3data\\1mhp_hl_a_ll48k_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_SL91R\\1MHP_HL_SL91R_MT\\s3data\\1mhp_hl_sl91r_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_TA53R\\1VFB_AB_C_TA53R_MT\\s3data\\1vfb_ab_c_ta53r_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA50K\\1VFB_AB_C_YA50K_MT\\s3data\\1vfb_ab_c_ya50k_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\2BDN_HL_A_NL31K_MT\\s3data\\2bdn_hl_a_nl31k_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31K\\str_sbdn_wt\\s3data\\2bdn_hl_a_nl31k_wt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\2BDN_HL_A_NL31R\\2BDN_HL_A_NL31R_MT.tar\\s3data\\2bdn_hl_a_nl31r_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e_\u0437\u0430\u0440\u044f\u0436\u0435\u043d\u043d\u044b\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3BN9_B_CD_PD104H\\3BN9_B_CD_PD104H_MT.tar\\s3data\\3bn9_b_cd_pd104h_mt\\seed-1_sample-4\\summary_confidences.json]
============ 20 failed, 4 passed, 36 skipped, 110 errors in 1.11s =============
