============================= test session starts =============================
platform win32 -- Python 3.12.6, pytest-8.3.5, pluggy-1.5.0
rootdir: C:\Users\Redmi\Desktop\НИР\Мутации\str_WT
collected 183 items

test_json_mt_wt.py FFsssEEEEEEEEEEF.FsssEEEEEEEEEEFFsssEEEEEEEEEEFFsssEE [ 28%]
EEEEEEEEF.FsssEEEEEEEEEE.sssEEEEEEEEEEs.EEEsEEEEEEEEEEF.FsssEEEEEEEEEE.s [ 68%]
ssEEEEEEEEEEF.FsssEEEEEEEEEEFFsssEEEEEEEEEEFFsssEEEEEEEEEE               [100%]

=================================== ERRORS ====================================
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...2\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...2\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...2\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...2\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...2\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp_mut.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp_mut.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = '1xgp_mut.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: 1xgp_mut.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = '1xgp_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: 1xgp_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_data.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_data.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = '1xgp_data.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: 1xgp_data.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...4b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: confidences.json

test_json_mt_wt.py:50: ValueError
_ ERROR at setup of test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\summary_confidences.json] _

request = <SubRequest 'pair' for <Function test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u...0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\summary_confidences.json]>>

    @pytest.fixture(params=list(get_all_json_files(OUTPUT_DIR)))
    def pair(request):
        output_path = request.param
        output_fname = os.path.basename(output_path)
    
>       structure_id = extract_structure_id(output_fname)

test_json_mt_wt.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

output_fname = 'summary_confidences.json'

    def extract_structure_id(output_fname: str) -> str:
        """
        Из имени сгенерированного файла вытаскивает ID структуры для поиска референсного файла.
        Например, из '1BJ1_HL_VW_HH101Y_MT.json' -> '1BJ1_HL_VW'
        """
        parts = output_fname.split("_")
        if len(parts) >= 3:
            return "_".join(parts[:3])  # первые три части
        else:
>           raise ValueError(f"Неожиданное имя файла: {output_fname}")
E           ValueError: Неожиданное имя файла: summary_confidences.json

test_json_mt_wt.py:50: ValueError
================================== FAILURES ===================================
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.json] _

pair = ('1BJ1_HL_VW_HH101Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1BJ1_HL_VW_WT', 'sequences': [{'pr...IKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1BJ1_HL_VW_HH101Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPYYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1BJ1_HL_VW_HH101Y_MT.json] _

pair = ('1BJ1_HL_VW_HH101Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1BJ1_HL_VW_WT', 'sequences': [{'pr...IKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1BJ1_HL_VW_HH101Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPHYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGYTFTNYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPYYYGSSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIQMTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGE"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT.json] _

pair = ('1KIQ_AB_C_FB101Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1KIQ_AB_C_FB101Y_WT', 'sequences': ...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1KIQ_AB_C_FB101Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDFRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1KIQ_AB_C_FB101Y_MT.json] _

pair = ('1KIQ_AB_C_FB101Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1KIQ_AB_C_FB101Y_WT', 'sequences': ...'DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1KIQ_AB_C_FB101Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDFRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.json] _

pair = ('1MHP_HL_A_LL48W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_LL48W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYWTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1MHP_HL_A_LL48W_MT.json] _

pair = ('1MHP_HL_A_LL48W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_LL48W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYWTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.json] _

pair = ('1MHP_HL_A_NL29Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_NL29Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVYHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1MHP_HL_A_NL29Y_MT.json] _

pair = ('1MHP_HL_A_NL29Y_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1MHP_HL_A_SH52M_WT', 'sequences': [{...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1MHP_HL_A_NL29Y_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVNHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLVESGGGLVQPGGSLRLSCAASGFTFSRYTMSWVRQAPGKGLEWVATISGGGHTYYLDSVKGRFTISRDNSKNTLYLQMNSLRAEDTAVYYCTRGFGDGGYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "IQLTQSPSSLSASVGDRVTITCSASSSVYHMFWYQQKPGKAPKPWIYLTSNLASGVPSRFSGSGSGTDYTLTISSLQPEDFATYYCQQWSGNPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT.json] _

pair = ('1VFB_AB_C_YA32W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNWLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_YA32W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNWLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1VFB_AB_C_YA32W_MT.json] _

pair = ('1VFB_AB_C_YA32W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1VFB_AB_C_YA32W_WT', 'sequences': [{...'DIVLTQSPASLSASVGETVTITCRASGNIHNWLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1VFB_AB_C_YA32W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNYLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVQLQESGPGLVAPSQSLSITCTVSGFSLTGYGVNWVRQPPGKGLEWLGMIWGDGNTDYNSALKSRLSISKDNSKSQVFLKMNSLHTDDTARYYCARERDYRLDYWGQGTTLTVSS"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPASLSASVGETVTITCRASGNIHNWLAWYQQKQGKSPQLLVYYTTTLADGVPSRFSGSGSGTQYSLKINSLQPEDFGSYYCQHFWSTPRTFGGGTKLEIK"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT.json] _

pair = ('1XGQ_AB_C_VB33F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1XGQ_AB_C_VB33F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1XGQ_AB_C_VB33F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDVWSWIRKFPGNKLEYMGYISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "MDIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDFWSWIRKFPGNKLEYMGYISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "MDIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1XGQ_AB_C_VB33F_MT.json] _

pair = ('1XGQ_AB_C_VB33F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '1XGQ_AB_C_VB33F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 1XGQ_AB_C_VB33F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDVWSWIRKFPGNKLEYMGYISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "MDIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "EVQLQESGPSLVKPSQTLSLTCSVTGDSVTSDFWSWIRKFPGNKLEYMGYISYSGSTYYHPSLKSRISITRDTSKNQYYLQLNSVTTEDTATYYCASWGGDVWGAGTTVTVSSAKTTAPSVYPLAPVCGDTTGSSVTLGCLVKGYFPEPVTLTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVTSSTWPSQSITCNVAHPASSTKVDKKI"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "MDIVLTQSPATLSVTPGDSVSLSCRASQSISNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT.json] _

pair = ('3HFM_HL_Y_WH98F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3HFM_HL_Y_WH98F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3HFM_HL_Y_WH98F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANFDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3HFM_HL_Y_WH98F_MT.json] _

pair = ('3HFM_HL_Y_WH98F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3HFM_HL_Y_WH98F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3HFM_HL_Y_WH98F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANFDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.json] _

pair = ('3HFM_HL_Y_YH33W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3HFM_HL_Y_WH98F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3HFM_HL_Y_YH33W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDWWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3HFM_HL_Y_YH33W_MT.json] _

pair = ('3HFM_HL_Y_YH33W_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '3HFM_HL_Y_WH98F_WT', 'sequences': [{...KRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 3HFM_HL_Y_YH33W_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDYWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "DVQLQESGPSLVKPSQTLSLTCSVTGDSITSDWWSWIRKFPGNRLEYMGYVSYSGSTYYNPSLKSRISITRDTSKNQYYLDLNSVTTEDTATYYCANWDGDYWGQGTLVTVSAAKTTPPSVYPLAPGSAAQTNSMVTLGCLVKGYFPEPVTVTWNSGSLSSGVHTFPAVLQSDLYTLSSSVTVPSSPRPSETVTCNVAHPASSTKVDKKIVPRDC"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVLTQSPATLSVTPGNSVSLSCRASQSIGNNLHWYQQKSHESPRLLIKYASQSISGIPSRFSGSGSGTDFTLSINSVETEDFGMYFCQQSNSWPYTFGGGTKLEIKRADAAPTVSIFPPSSEQLTSGGASVVCFLNNFYPKDINVKWKIDGSERQNGVLNSWTDQDSKDSTYSMSSTLTLTKDEYERHNSYTCEATHKTSTSPIVKSFNRNEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.json] _

pair = ('4I77_HL_Z_WH52F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '4I77_HL_Z_WT', 'sequences': [{'prote...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 4I77_HL_Z_WH52F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVTLRESGPALVKPTQTLTLTCTVSGFSLSAYSVNWIRQPPGKALEWLAMIWGDGKIVYNSALKSRLTISKDTSKNQVVLTMTNMDPVDTATYYCAGDGYYPYAMDNWGQGSLVTVSSASTKGPSVFPLAPCSRSTSESTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTKTYTCNVDHKPSNTKVDKRVESK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVMTQSPDSLSVSLGERATINCRASKSVDSYGNSFMHWYQQKPGQPPKLLIYLASNLESGVPDRFSGSGSGTDFTLTISSLQAEDVAVYYCQQNNEDPRTFGGGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVTLRESGPALVKPTQTLTLTCTVSGFSLSAYSVNWIRQPPGKALEWLAMIFGDGKIVYNSALKSRLTISKDTSKNQVVLTMTNMDPVDTATYYCAGDGYYPYAMDNWGQGSLVTVSSASTKGPSVFPLAPCSRSTSESTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTKTYTCNVDHKPSNTKVDKRVESK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVMTQSPDSLSVSLGERATINCRASKSVDSYGNSFMHWYQQKPGQPPKLLIYLASNLESGVPDRFSGSGSGTDFTLTISSLQAEDVAVYYCQQNNEDPRTFGGGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
_ test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4I77_HL_Z_WH52F_MT.json] _

pair = ('4I77_HL_Z_WH52F_MT.json', {'dialect': 'alphafold3', 'modelSeeds': [1], 'name': '4I77_HL_Z_WT', 'sequences': [{'prote...KRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC'}}], ...})

    def test_chains_match(pair):
        fname, expected, output = pair
        # Сравниваем списки "sequences"
        if expected.get("sequences") != output.get("sequences"):
            diff = {
                "expected": expected.get("sequences"),
                "output": output.get("sequences")
            }
>           pytest.fail(
                f"\n\nФайл {fname} НЕ совпадает по цепям!\nРазличия:\n{json.dumps(diff, indent=2, ensure_ascii=False)}"
            )
E           Failed: 
E           
E           Файл 4I77_HL_Z_WH52F_MT.json НЕ совпадает по цепям!
E           Различия:
E           {
E             "expected": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVTLRESGPALVKPTQTLTLTCTVSGFSLSAYSVNWIRQPPGKALEWLAMIWGDGKIVYNSALKSRLTISKDTSKNQVVLTMTNMDPVDTATYYCAGDGYYPYAMDNWGQGSLVTVSSASTKGPSVFPLAPCSRSTSESTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTKTYTCNVDHKPSNTKVDKRVESK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVMTQSPDSLSVSLGERATINCRASKSVDSYGNSFMHWYQQKPGQPPKLLIYLASNLESGVPDRFSGSGSGTDFTLTISSLQAEDVAVYYCQQNNEDPRTFGGGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ],
E             "output": [
E               {
E                 "protein": {
E                   "id": "H",
E                   "sequence": "QVTLRESGPALVKPTQTLTLTCTVSGFSLSAYSVNWIRQPPGKALEWLAMIFGDGKIVYNSALKSRLTISKDTSKNQVVLTMTNMDPVDTATYYCAGDGYYPYAMDNWGQGSLVTVSSASTKGPSVFPLAPCSRSTSESTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTKTYTCNVDHKPSNTKVDKRVESK"
E                 }
E               },
E               {
E                 "protein": {
E                   "id": "L",
E                   "sequence": "DIVMTQSPDSLSVSLGERATINCRASKSVDSYGNSFMHWYQQKPGQPPKLLIYLASNLESGVPDRFSGSGSGTDFTLTISSLQAEDVAVYYCQQNNEDPRTFGGGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"
E                 }
E               }
E             ]
E           }

test_json_mt_wt.py:78: Failed
=========================== short test summary info ===========================
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1BJ1_HL_VW_HH101Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1KIQ_AB_C_FB101Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1MHP_HL_A_LL48W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1MHP_HL_A_NL29Y_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1VFB_AB_C_YA32W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1XGQ_AB_C_VB33F_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3HFM_HL_Y_WH98F_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3HFM_HL_Y_YH33W_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.json]
FAILED test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4I77_HL_Z_WH52F_MT.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1BJ1_HL_VW_HH101Y\\1BJ1_HL_VW_HH101Y_MT.tar\\s3data\\1bj1_hl_vw_hh101y_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1KIQ_AB_C_FB101Y\\1KIQ_AB_C_FB101Y_MT\\s3data\\1kiq_ab_c_fb101y_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_LL48W\\1MHP_HL_A_LL48W_MT.tar\\s3data\\1mhp_hl_a_ll48w_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1MHP_HL_A_NL29Y\\1MHP_HL_A_NL29Y_MT.tar\\s3data\\1mhp_hl_a_nl29y_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\1VFB_AB_C_YA32W_MT\\s3data\\1vfb_ab_c_ya32w_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1VFB_AB_C_YA32W\\str_1vfb_WT\\s3data\\1vfb_ab_c_ya32w_wt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp_mut.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\1xgp_data.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGP_AB_C_AB33F\\1XGP_AB_C_AB33F_MT\\s3data\\1xgp\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\1XGQ_AB_C_VB33F_MT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\1XGQ_AB_C_VB33F\\str_1xgq_WT\\s3data\\1xgq_ab_c_vb33f_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_WH98F\\3HFM_HL_Y_WH98F_MT\\s3data\\3hfm_hl_y_wh98f_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\3HFM_HL_Y_YH33W\\3HFM_HL_Y_YH33W_MT.tar\\s3data\\3hfm_hl_y_yh33w_mt\\seed-1_sample-4\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-0\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-1\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-2\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-3\\summary_confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\confidences.json]
ERROR test_json_mt_wt.py::test_chains_match[C:\\Users\\Redmi\\Desktop\\\u041d\u0418\u0420\\\u041c\u0443\u0442\u0430\u0446\u0438\u0438\\\u0442\u0438\u043f\u044b_\u0430\u043c\u0438\u043d\u043e\u043a\u0438\u0441\u043b\u043e\u0442\\\u0410\u0440\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435\\\u0433\u043e\u0442\u043e\u0432\u044b\u0435\\4I77_HL_Z_WH52F\\4I77_HL_Z_WH52F_MT.tar\\s3data\\4i77_hl_z_wh52f_mt\\seed-1_sample-4\\summary_confidences.json]
============ 18 failed, 7 passed, 35 skipped, 123 errors in 1.37s =============
